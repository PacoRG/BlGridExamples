@page "/"

@using BlGrid.Infrastructure.Entities
@using BlGrid.Infrastructure.Enums
@using BlGrid.Infrastructure.Models
@using BlGrid.Infrastructure.Models.FilterModels
@using DnetAdminDashboard.Infrastructure.Enums
@using DnetAdminDashboard.Infrastructure.Interfaces
@using DnetAdminDashboard.Infrastructure.Models
@using DnetAdminDashboard.Infrastructure.Services
@using System.Net.Http.Json
@using System.Text
@using BlGrid.Shared.Infrastructure.Entities
@using BlGrid.Shared.Shared.CustomComponents
@using Newtonsoft.Json
@using DnetSpinnerComponent.Infrastructure.Interfaces

@inject IThemeMessageService<ThemeConfigData> ThemeMessageService
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject ISpinnerService SpinnerService

<div class="container-fluid" style="padding-top: 10px;">
    <div class="row" style="height: calc(100% - 60px)">
        <div class="col-12" style="height: calc(100% - 0px);">
            <div class="dnet-panel-header-wrapper">
                <div class="dnet-panel-header-text">
                    <div>
                        Main Grid Example
                    </div>
                </div>
                <div class="dnet-panel-header-controls">
                    <div class="dnet-panel-header-controls-container">
                        <div>
                            <div class="dnet-panel-header-control-button">
                                <span class="dnet-panel-header-button-icon blg-panel-control-test"></span>
                                <span class="dnet-button-text">Update</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="height: calc(100% - 0px); width: 100%; background-color: #FFFFFF">
                <BlgGrid @ref="_blGridReference" GridData="@Persons"
                         GridColumns="@GridColumns"
                         GroupGridColumn="GroupGridColumn"
                         TItem="Person"
                         GridOptions="GridOptions"
                         OnRowClicked="RowClicked"
                         OnSortingChanged="SortingChanged"
                         OnFilterChanged="FilterChanged"
                         OnAdvancedFilterChanged="AdvancedFilterChanged"
                         OnGroupingChanged="GroupingChanged"
                         OnPaginationChanged="PaginationChanged">
                </BlgGrid>
            </div>
        </div>
    </div>
</div>

@code {


    private BlgGrid<Person> _blGridReference;

    public List<Person> Persons { get; set; } = new List<Person>();

    public List<GridColumn<Person>> GridColumns { get; set; }

    public GridColumn<Person> GroupGridColumn { get; set; }

    public GridOptions<Person> GridOptions { get; set; }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        GridOptions = GetGridOptions();

        if (GridOptions.EnableServerSideAdvancedFilter || GridOptions.EnableServerSideFilter || GridOptions.EnableServerSidePagination || GridOptions.EnableServerSideSorting)
        {
            var (totalItems, persons) = await GetServerSidePersons();

            Persons = persons;

            GridOptions.NumberOfRows = totalItems;
        }
        else
        {
            var persons = await GetPersons();

            GridOptions.NumberOfRows = persons.Count;

            Persons = persons;
        }

        GridColumns = GetGridColumns();

        GroupGridColumn = GetGroupGridColumn();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SetupTheme();
    }

    private void SetupTheme()
    {
        var themeConfigData = new ThemeConfigData()
        {
            IsDesktopMode = true,
            IsFooterHidden = true,
            IsHeaderHidden = false,
            IsLeftColumnHidden = false,
            IsLeftColumnFixed = true,
            IsHeaderFixed = true,
            ShowMinifier = false
        };

        var actionMessage = new ActionMessage<ThemeConfigData>
        {
            Emitter = ThemeMessageEmitter.DefaultComponent,
            Data = themeConfigData
        };

        ThemeMessageService.SendMessage(actionMessage);
    }

    private async Task<List<Person>> GetPersons()
    {
        var client = ClientFactory.CreateClient("WebHostURL");

        var dataPersons = await client.GetFromJsonAsync<List<Person>>("/sample-data/person_500.json");

        return dataPersons;
    }

    private async Task<Tuple<int, List<Person>>> GetServerSidePersons()
    {

        var searchModel = new SearchModel
        {
            SortModel = new SortModel
            {
                Order = SortOrder.Ascending,
                ColumnName = "Name"
            },
            PaginationModel = new PaginationModel()
            {
                PageSize = GridOptions.PaginationPageSize,
                CurrentPage = GridOptions.PaginationStartPage,
            }
        };

        var response = await HttpClient.PostAsJsonAsync("api/person/searchpersons", searchModel);

        var data = await response.Content.ReadFromJsonAsync<PersonSearchResult>();

        return new Tuple<int, List<Person>>(data.TotalItems, data.Persons);
    }

    public void Test()
    {
        //var list = _blGridReference.GetSelectedNodes();

        var gridColumn = GridColumns.FirstOrDefault(p => p.DataField == "Name");

        //gridColumn.Filter = "33";

        gridColumn.AdvancedFilterModel = new AdvancedFilterModel
        {
            Column = "Name",
            Value = "A",
            Operator = FilterOperator.StartsWith,
            AdditionalValue = null,
            AdditionalOperator = FilterOperator.None,
            Condition = FilterCondition.And,
            Type = CellDataType.Text
        };

        _blGridReference.SetColumnDefs(GridColumns);
    }

    public void RowClicked(RowNode<Person> rowNode)
    {
        var tt = rowNode;
    }

    public async Task PaginationChanged(SearchModel searchModel)
    {
        //await ServerSideOperation(searchModel);
    }

    public async Task SortingChanged(SearchModel searchModel)
    {
        //await ServerSideOperation(searchModel);
    }

    public async Task AdvancedFilterChanged(SearchModel searchModel)
    {
        //await ServerSideOperation(searchModel);
    }

    public void FilterChanged(SearchModel searchModel)
    {
    }

    public void GroupingChanged(GroupModel groupModel)
    {
        var gp = groupModel;
    }

    private async Task ServerSideOperation(SearchModel searchModel)
    {
        if (_blGridReference is null) return;

        if (searchModel.SortModel == null)
        {
            searchModel.SortModel = new SortModel
            {
                Order = SortOrder.Ascending,
                ColumnName = "Name"
            };
        }

        var response = await HttpClient.PostAsJsonAsync("api/person/searchpersons", searchModel);

        var data = await response.Content.ReadFromJsonAsync<PersonSearchResult>();

        _blGridReference.SetRowData(data.Persons, data.TotalItems);
    }

    private GridOptions<Person> GetGridOptions()
    {
        return new GridOptions<Person>()
        {
            HeaderHeight = 40,
            RowHeight = 40,
            SuppressRowClickSelection = false,
            RowMultiSelectWithClick = true,
            GridClass = "cvs-bl-grid",
            GroupDefaultExpanded = true,
            SuppressFilterRow = false,
            //EnableServerSidePagination = true,
            //EnableServerSideSorting = true,
            //EnableServerSideAdvancedFilter = true,
            //EnableServerSideFilter = true,
            //EnableServerSideGrouping = false,
            SuppressPaginationPanel = false,
            EnableAdvancedFilter = true,
            EnableGrouping = true,
            CheckboxSelectionColumn = true,
            DefaultAdvancedFilterOperator = FilterOperator.Contains,
            IsDebugMode = false,
            NullValueSortedToEnd = true
        };
    }

    private GridColumn<Person> GetGroupGridColumn()
    {
        return new GridColumn<Person>
        {
            Height = 40,
            Width = 200,
            CanGrow = 0
        };
    }

    private RenderFragment CreateCellTemplateComponent(RowNode<Person> data) => builder =>
    {
        builder.OpenComponent(0, typeof(CellTemplateComponent));
        builder.AddAttribute(1, "RowNode", data);
        builder.CloseComponent();
    };

    private List<GridColumn<Person>> GetGridColumns()
    {
        var height = 40;
        var width = 200;
        var canGrow = 0;

        return new List<GridColumn<Person>> {
                        new GridColumn<Person> {
                            CellId = 10,
                            HeaderName = "Id",
                            DataField = "Id",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.PersonId
                        },
                        new GridColumn<Person> {
                            CellId = 8,
                            HeaderName = "Index",
                            DataField = "Index",
                            Width= 100,
                            Height= height,
                            CanGrow = canGrow,
                            Sortable = true,
                            CellData = (x) => x.Index
                        },
                        new GridColumn<Person> {
                            CellId = 3,
                            HeaderName = "IsActive",
                            DataField = "IsActive",
                            Width= 150,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.IsActive,
                            CellDataType = CellDataType.Boolean,
                            RowGroup = true,
                            ShowGroupingButtons = true,
                            AlingContent = AlingContent.Center
                        },
                        new GridColumn<Person> {
                            CellId = 2,
                            HeaderName = "Balance",
                            DataField = "Balance",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Balance,
                            CellTemplate = typeof(CellPercentageComponent),
                        },
                         new GridColumn<Person> {
                            CellId = 4,
                            HeaderName = "Picture",
                            DataField = "Picture",
                            Width= 150,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Picture,
                            CellTemplate = typeof(CellPhotoComponent),
                        },
                        new GridColumn<Person> {
                            CellId = 5,
                            HeaderName = "Age",
                            DataField = "Age",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x?.Age,
                            CellDataType = CellDataType.Number,
                            SortStatus = SortOrder.Ascending,
                            Sortable = true,
                            RowGroup = true,
                            ShowGroupingButtons = true,
                            AlingContent = AlingContent.Center
                        },
                        new GridColumn<Person> {
                            CellId = 9,
                            HeaderName = "EyeColor",
                            DataField = "EyeColor",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.EyeColor,
                            CellDataType = CellDataType.Text,
                            Sortable = true,
                        },
                        new GridColumn<Person> {
                            CellId = 0,
                            HeaderName = "Name",
                            DataField = "Name",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Name,
                            Sortable = true,
                            CellDataType = CellDataType.Text,
                            Hide = false
                        },
                        new GridColumn<Person> {
                            CellId = 1,
                            HeaderName = "Gender",
                            DataField = "Gender",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Gender,
                            CellDataType = CellDataType.Text
                        },
                        new GridColumn<Person> {
                            CellId = 6,
                            HeaderName = "Company",
                            DataField = "Company",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Company
                        },
                        new GridColumn<Person> {
                            CellId = 7,
                            HeaderName = "Email",
                            DataField = "Email",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Email
                        },
                          new GridColumn<Person> {
                            CellId = 11,
                            HeaderName = "Phone",
                            DataField = "Phone",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Phone
                        },
                           new GridColumn<Person> {
                            CellId = 12,
                            HeaderName = "Address",
                            DataField = "Address",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Address
                        },
                            new GridColumn<Person> {
                            CellId = 13,
                            HeaderName = "Registered",
                            DataField = "Registered",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.IsActive
                        },
                            new GridColumn<Person> {
                            CellId = 14,
                            HeaderName = "Latitude",
                            DataField = "Latitude",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Latitude
                        },
                            new GridColumn<Person> {
                            CellId = 15,
                            HeaderName = "Longitude",
                            DataField = "Longitude",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Longitude
                        },
                            new GridColumn<Person> {
                            CellId = 16,
                            HeaderName = "Greeting",
                            DataField = "Greeting",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Greeting
                        },
                            new GridColumn<Person> {
                            CellId = 17,
                            HeaderName = "FavoriteFruit",
                            DataField = "FavoriteFruit",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.FavoriteFruit
                        },

        };
    }

    //var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:5000/api/person/addpersons");

    //var client = ClientFactory.CreateClient();

    //var httpContent = new StringContent(JsonConvert.SerializeObject(Persons), Encoding.UTF8, "application/json");

    //var response = await client.PostAsync("http://localhost:5000/api/person/addpersons", httpContent);

    //var response = await HttpClient.PostAsJsonAsync("api/person/addpersons", Persons);
}


