@page "/DummyExample"
@page "/DummyExample/{myDummyParameter:int}"

@using BlGrid.Infrastructure.Entities
@using BlGrid.Infrastructure.Enums
@using BlGrid.Shared.Shared.CustomComponents
@using BlGridServer.Infrastructure.Entities
@using DnetAdminDashboard.Infrastructure.Enums
@using DnetAdminDashboard.Infrastructure.Interfaces
@using DnetAdminDashboard.Infrastructure.Models
@using System.Net.Http.Json
@using BlGrid.Shared.Infrastructure.Entities

@inject IThemeMessageService<ThemeConfigData> ThemeMessageService
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<div class="container-fluid" style="padding-top: 10px;">
    <div class="row" style="height: calc(100% - 60px)">
        <div class="col-12" style="height: calc(100% - 0px);">
            <div class="dnet-panel-header-wrapper">
                <div class="dnet-panel-header-text">
                    <div>
                        Simple example
                    </div>
                </div>
                <div class="dnet-panel-header-controls">
                </div>
            </div>
            <div style="height: calc(100% - 0px); width: 100%; background-color: #FFFFFF">
                <BlgGrid @ref="_blGridReference"
                         GridData="@Persons"
                         GridColumns="@GridColumns"
                         TItem="Person"
                         GridOptions="GridOptions"
                         >
                </BlgGrid>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int MyDummyParameter { get; set; }

    private BlgGrid<Person> _blGridReference;

    public List<Person> Persons { get; set; } = new List<Person>();

    public List<GridColumn<Person>> GridColumns { get; set; } = new List<GridColumn<Person>>();

    public GridColumn<Person> GroupGridColumn { get; set; }

    public GridOptions<Person> GridOptions { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SetupTheme();

        GridOptions = GetGridOptions();

        GridColumns = GetGridColumns();

        var persons = await GetPersons();

        GridOptions.NumberOfRows = persons.Count;

        _blGridReference.SetRowData(persons);
    }

    private void SetupTheme()
    {
        var themeConfigData = new ThemeConfigData()
        {
            IsDesktopMode = true,
            IsFooterHidden = true,
            IsHeaderHidden = false,
            IsLeftColumnHidden = false,
            IsLeftColumnFixed = true,
            IsHeaderFixed = true,
            ShowMinifier = false
        };

        var actionMessage = new ActionMessage<ThemeConfigData>
        {
            Emitter = ThemeMessageEmitter.DefaultComponent,
            Data = themeConfigData
        };

        ThemeMessageService.SendMessage(actionMessage);
    }

    private async Task<List<Person>> GetPersons()
    {
        var client = ClientFactory.CreateClient("WebHostURL");

        var dataPersons = await client.GetFromJsonAsync<List<Person>>("/sample-data/person_500.json");

        return dataPersons;
    }

    private GridOptions<Person> GetGridOptions()
    {
        return new GridOptions<Person>()
        {
            HeaderHeight = 40,
            RowHeight = 40,
            GridClass = "cvs-bl-grid",
            SuppressRowClickSelection = false,
        };
    }

    private List<GridColumn<Person>> GetGridColumns()
    {
        var height = 40;
        var width = 200;
        var canGrow = 1;

        return new List<GridColumn<Person>> {
                        new GridColumn<Person> {
                            CellId = 3,
                            HeaderName = "IsActive",
                            DataField = "IsActive",
                            Width= 150,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.IsActive,
                            AlingContent = AlingContent.Center,
                            ColumnOrder = 1,
                        },
                        new GridColumn<Person> {
                            CellId = 5,
                            HeaderName = "Age",
                            DataField = "Age",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Age,
                            AlingContent = AlingContent.Center,
                            ColumnOrder = 2
                        },
                        new GridColumn<Person> {
                            CellId = 0,
                            HeaderName = "Name",
                            DataField = "Name",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Name,
                            ColumnOrder = 3
                        },
                        new GridColumn<Person> {
                            CellId = 1,
                            HeaderName = "Gender",
                            DataField = "Gender",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Gender,
                            ColumnOrder = 4
                        },
                        new GridColumn<Person> {
                            CellId = 6,
                            HeaderName = "Company",
                            DataField = "Company",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Company,
                            ColumnOrder = 5
                        },
                        new GridColumn<Person> {
                            CellId = 7,
                            HeaderName = "Email",
                            DataField = "Email",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Email,
                            ColumnOrder = 6
                        },
                          new GridColumn<Person> {
                            CellId = 11,
                            HeaderName = "Phone",
                            DataField = "Phone",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Phone,
                              ColumnOrder = 7
                        },
                           new GridColumn<Person> {
                            CellId = 12,
                            HeaderName = "Address",
                            DataField = "Address",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Address,
                               ColumnOrder = 8
                        }

        };
    }
}