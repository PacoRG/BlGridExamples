@page "/ServerSideOperationsExample"

@using BlGrid.Infrastructure.Entities
@using BlGrid.Infrastructure.Enums
@using BlGridServer.Infrastructure.Entities
@using BlGrid.Infrastructure.Models
@using BlGrid.Infrastructure.Models.FilterModels
@using BlGrid.Shared.Shared.CustomComponents
@using DnetAdminDashboard.Infrastructure.Enums
@using DnetAdminDashboard.Infrastructure.Interfaces
@using DnetAdminDashboard.Infrastructure.Models
@using System.Net.Http.Json
@using BlGrid.Shared.Infrastructure.Entities
@using DnetSpinnerComponent.Infrastructure.Interfaces

@inject IThemeMessageService<ThemeConfigData> ThemeMessageService
@inject HttpClient HttpClient
@inject ISpinnerService SpinnerService

<div class="container-fluid" style="padding-top: 10px;">
    <div class="row" style="height: calc(100% - 60px)">
        <div class="col-12" style="height: calc(100% - 0px);">
            <div class="dnet-panel-header-wrapper">
                <div class="dnet-panel-header-text">
                    <div>
                        Server side operations ( Filtering, AdvancedFiltering, Sorting, Pagination)
                    </div>
                </div>
                <div class="dnet-panel-header-controls">
                </div>
            </div>
            <div style="height: calc(100% - 0px); width: 100%; background-color: #FFFFFF">
                <BlgGrid @ref="_blGridReference" GridData="@Persons"
                         GridColumns="@GridColumns"
                         GroupGridColumn="GroupGridColumn"
                         TItem="Person"
                         GridOptions="GridOptions"
                         OnSortingChanged="SortingChanged"
                         OnFilterChanged="FilterChanged"
                         OnAdvancedFilterChanged="AdvancedFilterChanged"
                         OnGroupingChanged="GroupingChanged"
                         OnPaginationChanged="PaginationChanged">
                </BlgGrid>
            </div>
        </div>
    </div>
</div>

@code {

    //For sorting and filtering CellDataType is mandatory

    private BlgGrid<Person> _blGridReference;

    public List<Person> Persons { get; set; }

    public List<GridColumn<Person>> GridColumns { get; set; }

    public GridColumn<Person> GroupGridColumn { get; set; }

    public GridOptions<Person> GridOptions { get; set; }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        GridOptions = GetGridOptions();

        var (totalItems, persons) = await GetServerSidePersons();

        Persons = persons;

        GridOptions.NumberOfRows = totalItems;

        Persons = persons;

        GridColumns = GetGridColumns();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SetupTheme();
    }

    private void SetupTheme()
    {
        var themeConfigData = new ThemeConfigData()
        {
            IsDesktopMode = true,
            IsFooterHidden = true,
            IsHeaderHidden = false,
            IsLeftColumnHidden = false,
            IsLeftColumnFixed = true,
            IsHeaderFixed = true,
            ShowMinifier = false
        };

        var actionMessage = new ActionMessage<ThemeConfigData>
        {
            Emitter = ThemeMessageEmitter.DefaultComponent,
            Data = themeConfigData
        };

        ThemeMessageService.SendMessage(actionMessage);
    }

    private async Task<Tuple<int, List<Person>>> GetServerSidePersons()
    {
        SpinnerService.UdateCounter(1);

        var searchModel = new SearchModel
        {
            SortModel = new SortModel
            {
                Order = SortOrder.Ascending,
                ColumnName = "Name"
            },
            PaginationModel = new PaginationModel()
            {
                PageSize = GridOptions.PaginationPageSize,
                CurrentPage = GridOptions.PaginationStartPage,
            }
        };

        var response = await HttpClient.PostAsJsonAsync("api/person/searchpersons", searchModel);

        var data = await response.Content.ReadFromJsonAsync<PersonSearchResult>();

        SpinnerService.UdateCounter(-1);

        return new Tuple<int, List<Person>>(data.TotalItems, data.Persons);
    }

    public async Task PaginationChanged(SearchModel searchModel)
    {
        await ServerSideOperation(searchModel);
    }

    public async Task SortingChanged(SearchModel searchModel)
    {
        await ServerSideOperation(searchModel);
    }

    public void GroupingChanged(GroupModel groupModel)
    {
        var gp = groupModel;
    }

    public void FilterChanged(SearchModel searchModel)
    {
        //On ServerSide filtering Simple filter event is the same of advanced filter event
        //Easy manage search data
    }

    public async Task AdvancedFilterChanged(SearchModel searchModel)
    {
        await ServerSideOperation(searchModel);
    }

    private async Task ServerSideOperation(SearchModel searchModel)
    {
        SpinnerService.UdateCounter(1);

        if (_blGridReference is null) return;

        if (searchModel.SortModel == null)
        {
            searchModel.SortModel = new SortModel
            {
                Order = SortOrder.Ascending,
                ColumnName = "Name"
            };
        }

        var response = await HttpClient.PostAsJsonAsync("api/person/searchpersons", searchModel);

        var data = await response.Content.ReadFromJsonAsync<PersonSearchResult>();

        _blGridReference.SetRowData(data.Persons, data.TotalItems);

        SpinnerService.UdateCounter(-1);
    }

    private GridOptions<Person> GetGridOptions()
    {
        return new GridOptions<Person>()
        {
            HeaderHeight = 40,
            RowHeight = 40,
            GridClass = "cvs-bl-grid",
            SuppressFilterRow = false,
            EnableAdvancedFilter = true,
            EnableServerSidePagination = true,
            EnableServerSideSorting = true,
            EnableServerSideAdvancedFilter = true,
            EnableServerSideFilter = true,
        };
    }

    private List<GridColumn<Person>> GetGridColumns()
    {
        var height = 40;
        var width = 200;
        var canGrow = 0;

        return new List<GridColumn<Person>> {
                        new GridColumn<Person> {
                            CellId = 3,
                            HeaderName = "IsActive",
                            DataField = "IsActive",
                            Width= 150,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.IsActive,
                            AlingContent = AlingContent.Center
                        },
                        new GridColumn<Person> {
                            CellId = 5,
                            HeaderName = "Age",
                            DataField = "Age",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Age,
                            AlingContent = AlingContent.Center,
                            CellDataType = CellDataType.Number,
                            Sortable = true,
                            SortStatus = SortOrder.Ascending
                        },
                        new GridColumn<Person> {
                            CellId = 0,
                            HeaderName = "Name",
                            DataField = "Name",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Name,
                            CellDataType = CellDataType.Text,
                            Sortable = true,
                        },
                        new GridColumn<Person> {
                            CellId = 1,
                            HeaderName = "Gender",
                            DataField = "Gender",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Gender
                        },
                        new GridColumn<Person> {
                            CellId = 6,
                            HeaderName = "Company",
                            DataField = "Company",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Company,
                        },
                        new GridColumn<Person> {
                            CellId = 7,
                            HeaderName = "Email",
                            DataField = "Email",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Email,
                        },
                          new GridColumn<Person> {
                            CellId = 11,
                            HeaderName = "Phone",
                            DataField = "Phone",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Phone
                        },
                           new GridColumn<Person> {
                            CellId = 12,
                            HeaderName = "Address",
                            DataField = "Address",
                            Width= width,
                            Height= height,
                            CanGrow = canGrow,
                            CellData = (x) => x.Address,
                        }

        };
    }
}